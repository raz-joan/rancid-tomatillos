{"version":3,"sources":["Components/Movie.js","Components/MovieContainer.js","apiCalls.js","Components/MovieCard.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Movie","id","title","poster","className","src","alt","MovieContainer","movieElements","movies","map","movie","to","poster_path","apiCalls","fetchInfo","path","fetch","then","res","ok","json","Error","catch","err","Wrapper","movieID","useParams","movieId","MovieCard","componentDidMount","data","setState","error","videos","trailerId","find","video","type","trailer","key","state","release_date","average_rating","genres","overview","runtime","this","toFixed","index","frameBorder","Component","App","message","handleChange","event","search","target","value","searchedMovies","filter","toLowerCase","includes","filteredMovies","clearSearch","onClick","placeholder","name","onChange","element","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82d5c391.chunk.js","sourcesContent":["import React from 'react'\nimport '../CSS/Movie.css'\n\nconst Movie = ({ id, title, poster }) => {\n\n    return (\n        <img\n            className='image'\n            src={poster}\n            alt={title}\n            id={id}\n        />\n    )\n}\n\nexport default Movie","import React from 'react'\nimport Movie from './Movie'\nimport '../CSS/MovieContainer.css'\nimport { Link } from 'react-router-dom';\n\nconst MovieContainer = ({ movies }) => {\n\n    const movieElements = movies.map(movie => {\n        return( \n        <Link to={`/${movie.id}`} key={movie.id}>\n            <Movie \n                key={movie.id}\n                id={movie.id}\n                poster={movie.poster_path}\n                title={movie.title}\n            />\n        </Link>\n        )\n    })\n\n    return (\n        <div className='movie-container'>\n            {movieElements}\n        </div>\n    )\n}\n\nexport default MovieContainer","let apiCalls = {\n\n    fetchInfo(path) {\n        return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${path}`)\n            .then(res => {\n                if (res.ok) {\n                    return res.json()\n                } else {\n                    throw new Error('Server is down, try again later!')\n                }\n            })\n            .catch(err => err)\n            \n    }\n}\n\nexport default apiCalls","import React, { Component } from 'react'\nimport '../CSS/MovieCard.css'\nimport { Link, useParams } from 'react-router-dom'\nimport apiCalls from '../apiCalls'\n\nconst Wrapper = () => {\n  const movieID = useParams().movieId\n\n  class MovieCard extends Component {\n    constructor() {\n      super()\n      this.state = {\n        movie: {\n          id: '',\n          title: '',\n          poster_path: '',\n          release_date: '',\n          average_rating: 0,\n          genres: [],\n          overview: '',\n          runtime: ''\n        },\n        trailer: '',\n        error: ''\n      }\n    }\n\n    componentDidMount = () => {\n      apiCalls.fetchInfo(movieID)\n      .then(data => {\n        if (data.movie) {\n          this.setState({ movie: data.movie, error: '' })\n        } else {\n          this.setState({ error: data })\n        }\n      })\n\n      apiCalls.fetchInfo(`${movieID}/videos`)\n      .then(data => {\n        if (data.videos) {\n          const trailerId = data.videos.find(video => video.type === 'Trailer')\n          if (trailerId) {\n            this.setState({ trailer: trailerId.key, error: '' })\n          }\n        } else {\n          this.setState({ error: data })\n        }\n      })\n    }\n\n    render() {\n      if (this.state.error) {\n        return (\n          <h2 className='error'>404: Movie Not Found</h2>\n        )\n      }\n\n      if (!this.state.movie.title) {\n        return <h2 className=\"loading\">LOADING...</h2>\n      }\n\n      return (\n        <article className='movie-card-section'>\n          <div className='movie-card-top-section'>\n            <div className='movie-card-poster'>\n              <img\n                src={this.state.movie.poster_path}\n                alt={this.state.movie.title}\n              />\n            </div>\n            <div className='movie-card-info'>\n              <article className='movie-info'>\n                <h2>{this.state.movie.title}</h2>\n                <p className='sub-detail'>Release Date: {this.state.movie.release_date}</p>\n                <p className='sub-detail'>Rating: {(this.state.movie.average_rating).toFixed(1)}</p>\n                <p className='sub-detail'>Runtime: {this.state.movie.runtime} min</p>\n                <div className='genre'>Genre(s): {\n                  this.state.movie.genres.map((type, index) => <p key={index}>{type}</p>)}\n                </div>\n                <p className='summary'>{this.state.movie.overview}</p>\n              </article>\n            </div>\n          </div>\n          <div className='trailer-section'>\n            <iframe\n              src={`https://www.youtube.com/embed/${this.state.trailer}`}\n              title=\"YouTube video player\"\n              frameBorder=\"2\"\n            >\n            </iframe>\n            <Link to=\"/\">\n              <img\n                className='back-img'\n                src=\"https://fontmeme.com/permalink/211205/3aa3c3b8f115a7f3c42e0de18d43b8de.png\"\n                alt=\"return to main page button\"\n              />\n            </Link>\n          </div>\n        </article>\n      )\n    }\n  }\n\n  return (\n    <>\n      <MovieCard />\n    </>\n  )\n}\n\n\nexport default Wrapper","import React, { Component } from 'react'\nimport '../CSS/App.css'\nimport MovieContainer from './MovieContainer'\nimport Wrapper from './MovieCard'\nimport {Route, Routes, Link} from 'react-router-dom'\nimport apiCalls from '../apiCalls'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      movies: [],\n      error: '',\n      search: '',\n      filteredMovies: []\n    }\n  }\n\n  componentDidMount = () => {\n    apiCalls.fetchInfo('')\n      .then(data => {\n        if (data.movies) {\n          this.setState({ movies: data.movies, error: '' })\n        } else {\n          this.setState({ error: data.message })\n        }\n      })\n  }\n\n  handleChange = event => {\n    this.setState({search: event.target.value})\n    const searchedMovies = this.state.movies.filter(movie => {\n      return movie.title.toLowerCase().includes(`${ event.target.value.toLowerCase() }`)\n    })\n    this.setState({ filteredMovies: searchedMovies })\n    if (!event.target.value) {\n      this.setState({ filteredMovies: [] })\n    }\n  }\n\n  clearSearch = () => {\n    this.setState({search: '', filteredMovies: []})\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <h2 className='error'>Oops, something went wrong: '{this.state.error}'</h2>\n      )\n    }\n\n    if (!this.state.movies[0]) {\n      return <h2 className=\"loading\">LOADING...</h2>\n    }\n\n    return (\n      <>\n        <header className='header'>\n          <Link to='/'>\n            <img\n              className='title'\n              src=\"https://fontmeme.com/permalink/211204/cca36d9d02af58d8feae92729d642f28.png\" \n              onClick={event => this.clearSearch()}\n              alt=\"Rancid Tomatillos Title\"\n            />\n          </Link>\n          <input\n            type='text'\n            placeholder='Search by Movie Title'\n            name='search'\n            value={this.state.search}\n            onChange={event => this.handleChange(event)}\n          />\n        </header>\n        <main>\n          <Routes>\n            <Route path=\"/\" element={<MovieContainer \n              movies={this.state.filteredMovies.length ? this.state.filteredMovies : this.state.movies}\n            />}\n            />\n            <Route path=\"/:movieId\" element={<Wrapper />} />\n          </Routes>\n        </main>\n      </>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}